actors-own[
  need         ;; 0-100
  harvest-rate ;; 0-1
  share-rate   ;; 0-1
  energy       ;; resultat consommé - besoins
  doggybag      ;; variable temporaire pour gérer les partages
  myInstitutions ;; agent set d'institutions auxquelles appartiennent l'acteur
  bad-times ;; nb steps with energy < 0
]

to update-actors
  set needs sum [need] of actors
  ask actors[
    set energy 0
    set doggybag 0
  ]
  
  ;;harvest
  ask actors [
    set energy harvest-rate * [q] of patch-here
    set q ([q] of patch-here - energy)
  ]
  
  ;;share
  ask actors[
    if any? link-neighbors [ ;;Warning si pas de voisin je partage rien
      let share share-rate * energy / count link-neighbors
      ask link-neighbors [
        set doggybag doggybag + share
      ]
      set energy (energy - share-rate * energy)
    ]
  ]
  
  ask actors[
    set energy (energy + doggybag)
    set doggybag 0
  ]

  ;;consomm & die ?
  ask actors [
    set energy (energy - need)
    set size 2;(max list energy 1) / 50
    if energy < 0 [
      set bad-times bad-times + 1
      actor-udate-links
    ]
  ]
end

to actor-udate-links
  let nb-friends count link-neighbors
  repeat nb-friends / 3 [ask one-of link-neighbors [die]]
  repeat nb-friends / 3 [create-link-with one-of other actors]
end
