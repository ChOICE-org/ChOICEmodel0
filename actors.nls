actors-own[
  need         ;; 0-100
  harvest-rate ;; 0-1
  share-rate   ;; 0-1
  energy       ;; resultat consommé - besoins
  doggybag      ;; variable temporaire pour gérer les partages
  myInstitutions ;; agent set d'institutions auxquelles appartiennent l'acteur
  bad-times ;; nb steps with energy < 0
]

to update-actors
  set needs sum [need] of actors
  ask actors[
    set energy 0
    set doggybag 0
  ]
  
  ;;harvest
  ask actors [
    set energy harvest-rate * [q] of patch-here
    set q ([q] of patch-here - energy)
  ]
  
  ;;share
  ask actors[
    if any? link-neighbors [ ;;Warning si pas de voisin je partage rien
      let share share-rate * energy / count link-neighbors
      ask link-neighbors [
        set doggybag doggybag + share
      ]
      set energy (energy - share-rate * energy)
    ]
  ]
  
  ask actors[
    set energy (energy + doggybag)
    set doggybag 0
  ]

  ;;consomm & die ?
  ask actors [
    set energy (energy - need)
    set size 2;(max list energy 1) / 50
  ]
  
  ask actors [
     ifelse energy < 0 [
      set bad-times bad-times + 1
      leave-the-system
      actor-udate-links
    ]
    [
      embrace-the-system
      actor-udate-links-with-friends
    ]
  ]
  
  
end

to actor-udate-links
  let nb-friends count link-neighbors
  repeat nb-friends * making-mate-rate [ask one-of my-links [die]]
  let caller self
  let new-potential-friends actors with [not link-neighbor? caller]
  repeat nb-friends * making-mate-rate [create-link-with one-of other new-potential-friends]
end

to actor-udate-links-with-friends
  let nb-friends count link-neighbors
  let friends turtle-set nobody
  ask myInstitutions [
    set friends (turtle-set friends members)
  ]
  let caller self
  let new-potential-friends other friends with [not link-neighbor? caller]
  repeat min (list (count new-potential-friends) (nb-friends * making-mate-rate)) [ask one-of my-links [die]]
  repeat min (list (count new-potential-friends) (nb-friends * making-mate-rate)) [create-link-with one-of other new-potential-friends]
end

to leave-the-system
  let best-friend with-max [energy] link-neighbors
  if any? best-friend [
  set harvest-rate (harvest-rate + [harvest-rate] of one-of best-friend) / 2
  set share-rate (share-rate + [share-rate] of one-of best-friend) / 2
  ]
end

to embrace-the-system
  if count myInstitutions > 0 [
  let best-friend one-of myInstitutions
  set harvest-rate (harvest-rate + [get-harvest-rate] of best-friend) / 2
  set share-rate (share-rate + [get-share-rate] of best-friend) / 2
  ]
end